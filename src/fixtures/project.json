[
  {
    "name": "사전청약 페이지 간편 구축 시스템",
    "at": "(주)하이브미디어",
    "summary": {
      "period": "2022.10 ~ 2022.11 (1개월)",
      "description": "Server-Driven UI로 간편하게 사전청약 페이지를 수정 혹은 개설하는 시스템",
      "role": "풀스택 개발",
      "participants": 2,
      "content": [
        "Next.js 기반 메인 클라이언트 사이드 개발",
        [
          "SSR 기반으로 설정된 UI를 렌더링"
        ],
        "React 기반 운영 백오피스 개발(업로드, 입력, 테넌트 관리)",
        [
          "aws-sdk를 사용한 S3 업로드 및 캐시 무효화 작업 수행",
          "서브도메인으로 테넌트 구분, NestJS 기반 인증/인가 서버에서 테넌트별 권한 관리"
        ],
        "Node.js 기반 REST API 개발(CRUD)",
        [
          "AWS Lambda, API Gateway(인터페이스)를 사용한 서버리스 아키텍처",
          "관심고객등록 입력 폼 및 UI 설정을 NoSQL(AWS DynamoDB)에 저장"
        ]
      ]
    },
    "details": {
      "header": {
        "image": "/projects/laptop.webp",
        "tech_stack": ["TypeScript", "Next.js", "React"],
        "text": [
          "Server-Driven UI로 사전청약 페이지를 간편하게 개설하고, 수정할 수 있는 시스템입니다. 본청약 페이지와는 다르게 고객사의 요구 사항은 다양하지 않지만, 자료 수정이 잦고 빠르게 제작되어야 하는 특성이 있습니다.",
          "웹 퍼블리셔 인력 부족으로 인해 자료 수정 및 신규 제작이 지연되는 문제가 있어, 운영 백오피스를 통해 자료 업로드 및 UI 설정이 가능하도록 업무 프로세스를 개선 해보고자 하여 시작하게 되었습니다.",
          "웹 퍼블리셔 1인과 함께 진행하였으며, TypeScript와 함께 React 기반 운영 백오피스의 개발, Next.js 기반 메인 클라이언트 사이드의 프로젝트 세팅 및 SSR 구현을 담당했습니다. 운영 백오피스의 상태관리는 Recoil을 사용했으며, UI 및 관심고객등록 폼 설정 데이터의 SSR은 React-Query와 함께했습니다."
        ]
      },
      "body": [
        {
          "image": "/projects/renewal.webp",
          "text": "운영 백오피스에서 업로드한 자료는 AWS S3에 저장되며, CloudFront로 구성한 CDN을 통해 전달됩니다. 이 때, S3에 저장된 자료는 캐시되어 즉각 반영되지 않기에, 수정을 위해 업로드 시 캐시를 무효화하는 작업을 수행합니다. 이를 위해 aws-sdk를 사용했습니다."
        },
        {
          "image": "/projects/next_ts.png",
          "text": "고객사마다 필요로 하는 관심고객등록 폼의 필드가 상이했습니다. 이를 위해 관심고객등록 폼 설정을 NoSQL(DynamoDB)에 저장하고, 또한 인풋 컴포넌트가 모든 타입 속성에 대응할 수 있도록 확장성을 고려하여 추상화하고 구현했습니다. 이 과정에서, 타입스크립트의 제네릭과 유틸리티 타입을 적극적으로 활용하며 타입스크립트에 대해 깊이 이해할 수 있었습니다."
        }
      ]
    }
  },
  {
    "name": "이벤트월드",
    "at": "(주)하이브미디어",
    "summary": {
      "period": "2022.06 ~ 2022.09 (3개월)",
      "description": "웹 이벤트 광고주 어드민 시스템의 B2B SaaS 전환 프로젝트",
      "role": "풀스택 개발",
      "participants": 3,
      "content": [
        "Next.js 기반 어드민 클라이언트 사이드 개발",
        [
          "SSR(React-Query) 기반으로 고객 데이터 렌더링 및 캐싱 전략 구성",
          "Recharts 사용한 데이터 시각화(전환수, 방문수 등) 컴포넌트 제작",
          "여러 단계의 독립된 모달을 겹쳐 표시하며 Recoil을 사용한 상태관리 도입",
          "PM2 프로세스 매니저를 사용한 무중단 배포 구축"
        ],
        "React 기반 운영 백오피스 개발(포트폴리오 관리, 테넌트 관리)",
        [
          "이벤트 단위를 테넌트로 하여 서브도메인으로 구분, NestJS 기반 인증/인가 서버에서 테넌트별 권한 관리"
        ],
        "Node.js 기반 REST API 개발(CRUD)"
      ]
    },
    "details": {
      "header": {
        "image": "/projects/form.webp",
        "tech_stack": ["TypeScript", "Next.js", "React"],
        "text": [
          "웹 이벤트 광고주 어드민 시스템의 B2B SaaS 전환 프로젝트입니다. 기존에는 고객사마다 개별적으로 개발하고 배포하였으나 이를 B2B SaaS로 전환하여 하나의 어드민 시스템에서 여러 테넌트를 관리할 수 있도록 개발하였습니다.",
          "제한된 개발 리소스로 인해 외주 개발 의존도가 높아 개발 비용이 많이 들었고, 외주 팀 마다 선호하는 배포 방식이 달라 운영, 관리 측면에서의 어려움도 함께 있었습니다. 이를 해결하기 위해 처음에는 요건 정의서를 작성하며 외주 팀과 커뮤니케이션을 담당하고자 했으나 이 방법은 문제를 근본적으로 해결할 수 없다고 생각해 스타트업에서 서비스를 초기부터 구축하며 출시까지 해본 경험을 바탕으로 어드민 시스템을 클라우드 기반 B2B SaaS로 전환하여 개발하는 새로운 방향을 설정했습니다.",
          "서브도메인으로 테넌트를 구분하여, AWS ELB 서비스를 사용한 응용 계층 라우팅 구성과 NestJS 서버의 인증/인가 로직을 작성해 테넌트의 고객 DB를 격리하고 제공할 수 있도록 했습니다. 또, 고객 정보 수정 및 상담 기록 등의 기능을 담당하는 여러 단계의 독립된 모달을 겹쳐 표시하며 Recoil을 사용한 상태관리를 도입하여 유연한 확장성을 확보했습니다.",
          "웹 퍼블리셔 2인과 함께 진행했으며, 시스템 설계와 TypeScript 기반의 Next.js 어드민 시스템, React 운영 백오피스로 이루어진 프론트엔드 개발을 메인으로 담당했습니다."
        ]
      },
      "body": [
        {
          "image": "/projects/ts.webp",
          "text": "단일 어플리케이션으로 다양한 고객에게 서비스를 제공하면서 동시에 높은 사용자 경험을 줄 수 있어야 했습니다. 이를 위해 확장성을 고려하여 컴포넌트를 추상화하고, 타입스크립트와 함께 인터페이스를 명확하게 정의하여 타입 안전성을 확보함으로써 고객의 피드백에 유연하게 대응할 수 있는 구조를 마련할 수 있었습니다."
        },
        {
          "image": "/projects/eventworld-1.png",
          "text": [
            "프로젝트를 마무리하며, 2022년 10월 서비스를 정식으로 출시하고 옥시레킷벤키저, 경상남도 등 40개 이상의 기업 및 기관과 계약을 체결해 운영하였습니다. 시스템 구축을 통해 외주 의존도를 낮춰 건당 10만원에서 15만원 정도의 비용 지출을 없애고 개별 운영되던 인프라의 운영, 관리 측면에서의 일관성을 확보할 수 있었습니다.",
            "또, 타입스크립트 기반의 React, Next.js 프론트엔드 개발 및 Recoil, React-Query와 같은 상태 관리 도구를 학습하고 적용하며, 새로운 구현 기술에 대한 도전이 즐거웠고 마침내는 함께 이뤄낸 것에 대한 성취감을 느낄 수 있었습니다."
          ]
        }
      ]
    }
  },
  {
    "name": "청약 시스템 리엔지니어링",
    "at": "(주)하이브미디어",
    "summary": {
      "period": "2022.04 ~ 2022.05, (1개월)",
      "description": "기존 비즈니스 레거시 청산 및 인프라 마이그레이션",
      "role": "풀스택 개발",
      "participants": 2,
      "content": [
        "PHP 뷰 페이지의 비즈니스 로직 분리 및 HTML, JavaScript 기반으로 전환",
        "NestJS 기반 REST API 서버 개발(인증/인가)",
        [
          "AWS EC2, ELB를 사용해 배포 및 응용 계층 라우팅 구성",
          "전사 시스템의 인증/인가 작업 수행"
        ],
        "IDC 인프라에서 Amazon AWS로 마이그레이션",
        [
          "AWS RDS for MariaDB로 데이터베이스 마이그레이션",
          "AWS S3, CloudFront로 정적 페이지 마이그레이션",
          "Github Actions, Code Deploy를 사용한 CI/CD 구축"
        ]
      ]
    },
    "details": {
      "header": {
        "image": "/projects/engineer.webp",
        "tech_stack": ["JavaScript", "Node.js", "Amazon AWS"],
        "text": [
          "CREATORS(제작)팀에 속하게 되면서 외주 개발자 1인과 함께 기존 비즈니스인 청약 시스템의 레거시를 청산하고, 청약 오픈 후 다운 타임이 자주 발생했던 기존 시스템의 안정적인 운영과 인프라 비용 절감을 위해 IDC 인프라에서 Amazon AWS로의 마이그레이션을 수행했습니다.",
          "기존에는 PHP 뷰 페이지에 비즈니스 로직이 섞여 있어 유지보수가 어려웠고, SQL 쿼리 또한 노출되어 있어 보안에도 취약했습니다. 이를 개선하기 위해 뷰 페이지는 HTML, JavaScript 기반으로 전환하며 AWS S3, CloudFront를 통해 배포하고, 수정이 잦은 특성상 적절한 캐시 무효화 전략을 구성하였습니다.",
          "IDC 인프라에서 Amazon AWS 서버리스 기반으로 마이그레이션하며, 청약 오픈 후 100,000건의 요청 처리에도 서버 다운 타임이 발생하지 않도록 개선하였고, 임대한 고사양 서버의 유휴 상태에서의 과도한 비용 문제도 함께 해결하며 월 평균 인프라 비용을 평균 60만원에서 20만원 수준으로 절감할 수 있었습니다."
        ]
      },
      "body": [
        {
          "image": "/projects/serverless.webp",
          "text": [
            "서버 다운 타임을 해소하기 위해 가용성을 확보할 필요가 있었고, 분리한 비즈니스 로직을 AWS Lambda에 Node.js 핸들러 기반으로 배포하고 API Gateway 인터페이스를 통한 서버리스 REST API로 제공하는 서버리스 아키텍처를 구성했습니다.",
            "실행 시간에 비례하여 과금되는 형식인 만큼 유휴 상태의 비용 또한 최소화할 수 있었고, 개발자는 함수만 작성하면 되는 FaaS 특징 덕분에 인프라 관리 또한 단순화할 수 있었습니다."
          ]
        },
        {
          "image": "/projects/provisioning.webp",
          "text": [
            "이 프로젝트를 통해 IDC 인프라의 서비스를 모두 Amazon AWS 기반으로 마이그레이션 했습니다. 하지만 이후에도 추가로 고려해야 할 사항이 몇 가지 더 있었습니다.",
            "인프라를 옮겼지만 비용이 더 청구되면 안됐기에 EC2, ELB 위에서 서비스되는 시스템은 유휴 상태 시 사용을 종료할 수 있도록 업무 프로세스를 정립하고, CloudWatch 서비스를 통해 성능 지표를 적절히 구성하여 모니터링하며 과잉 프로비저닝하지 않도록 꾸준히 관리했습니다.",
            "또, S3, CloudFront를 통해 서비스되는 정적 웹 페이지의 경우는, 캐시 무효화와 함께 GitHub Actions와 Code Deploy를 사용해 CI/CD 파이프라인을 구축하는 경험을 해볼 수 있었습니다."
          ]
        }
      ]
    }
  },
  {
    "name": "데이터메니티 RMS",
    "at": "(주)히어로웍스",
    "summary": {
      "period": "2021.05 ~ 2021.09 (4개월)",
      "description": "주변/설정 호텔과 가격을 비교할 수 있는 다양한 시각화 기능을 제공하는 RMS(수익 관리 시스템)",
      "role": "풀스택 개발",
      "participants": 4,
      "content": [
        "jQuery => JavaScript 리팩토링, 이미지 포맷(WebP) 변경",
        "월간 페이지의 가격 조회를 일 단위 비동기 요청과 동적 렌더링으로 변경하여 FCP를 10초에서 3초 수준으로 개선",
        [
          "사용자 경험을 저해하지 않도록 Fallback UI 표시",
          "일 단위 조회 시 요청 오버헤드로 인해 조회 로직을 AWS Lambda로 분리"
        ],
        "d3.js, toast-ui를 사용한 주간/월간 가격 변동 추이 시각화",
        "7개 OTA의 데이터 스크래핑 자동화 시스템 구축",
        [
          "AWS ECR, ECS(Fargate), Batch 기반으로 전환하여 일 평균 105$ 에서 18$ 수준으로 비용 절감"
        ]
      ]
    },
    "details": {
      "header": {
        "image": "/projects/revenue.webp",
        "tech_stack": ["JavaScript", "jQuery", "Python", "Amazon AWS"],
        "text": [
          "OTA(온라인 여행 플랫폼)의 가격 정보를 스크래핑해 주변 호텔 가격 변동 추이 및 일자 별 가격 비교, 고객사 호텔의 리뷰 현황을 여러 시각화 기능을 통해 제공하여 호텔리어 및 사업주 고객의 가격 관리를 돕는 RMS(수익 관리 시스템) 입니다.",
          "첫 개발자로 합류하여, OTA 스크래핑 시스템 구축 및 풀스택 개발을 수행하며 창업 초기 회사의 기술 기반 마련에 기여하였고, 서비스를 운영하며 기획에도 함께 참여해 기능 개발 및 지속적인 웹 페이지 성능 지표 개선을 수행했고, 리팩토링 및 구현 기술 선정 등을 주도적으로 수행하며 개발 조직을 리드하는 경험을 쌓았습니다.",
          "웹 퍼블리셔 1인, Flutter 앱 개발자 1인, 백엔드 개발자 1인과 함께 하며 풀스택 개발 및 Amazon AWS 클라우드 엔지니어링을 수행했습니다."
        ]
      },
      "body": [
        {
          "image": "/projects/performance.webp",
          "text": [
            "월간 페이지의 가격 조회 로직을 일 단위 비동기 요청과 함께 클라이언트 사이드에서 간단한 처리 후 동적으로 렌더링하도록 변경하여 FCP를 10초에서 3초 수준으로 개선하였습니다. 함께, 사용자 경험을 저해하지 않도록 Fallback UI를 표시하고, 일 단위 조회 시 요청 오버헤드로 인해 조회 로직을 AWS Lambda 기반 서버리스 아키텍처로 변경하였습니다.",
            "또한, 이미지 포맷을 PNG 등에서 WebP로 변경하고, DOM을 제어하는 jQuery를 모듈화한 JavaScript로 리팩토링 하며 전반적인 웹 페이지 성능과 유지보수성을 개선했습니다. 이 과정에서 웹 페이지 성능 지표를 측정하고 개선하는 방법에 대해 고민할 수 있었고, 프론트엔드 개발에 있어 도구 선택의 중요성을 함께 느낄 수 있었습니다."
          ]          
        },
        {
          "image": "/projects/dashboard.webp",
          "text": [
            "고객사의 호텔리어 및 사업주의 목소리를 듣고, 함께 기획하며 반영하는 과정이 즐거웠습니다. 그 과정에서 서비스에 대한 긍정적인 의견은 힘이 되었고 개선 여지는 의욕이 되었습니다. 주로 시각화 기능 개발 요구가 많았고, d3.js, toast-ui와 같은 도구를 사용하여 제작하였습니다. 고객에게 정말 중요한 데이터가 무엇인지 고민해볼 수 있었던 소중한 경험이었습니다.",
            "서비스 런칭 후 그랜드조선 호텔, 켄싱턴 호텔&리조트 등 50개 이상의 고객사와 계약을 체결하고 운영해왔으며, 수집한 데이터를 바탕으로 2022년 비대면 바우처 공급기업 선정, 기술 역량 'T-4' 획득에 직접적으로 기여하며 비즈니스 측면에서 사고하는 능력을 키울 수 있었습니다."
          ]
        }
      ]
    }
  }
]